import React, { useEffect } from "react";
import {
  VStack, chakra, Flex, Img, Heading,
  HStack, Grid, GridItem, Text,
  Divider, Show, Box, Drawer,
  DrawerBody, DrawerHeader, DrawerOverlay,
  DrawerContent, DrawerCloseButton, useDisclosure
} from "@chakra-ui/react";
import DashBoardSidBarOptionComponent from "../../components/dashboard/DashBoardSidBarOptionComponent";
import { useRouter } from "next/router";
import { useAppDispatch, useAppSelector } from "../../helpers/hooks/reduxHooks";
import { getTokenFromLocalStorage, removeTokenFromLocalStorage } from "../../redux/features/auth/authSlice";
import Head from "next/head";
import remoteImages from "../../constants/remoteImages";
import MobileMore from "../../../public/assets/svgs/menuIcon.svg"
import { useGetWalletsQuery } from "../../redux/services/wallet.service";
import { setWalletBalance } from "../../redux/features/accountSettings/accounSettingsSlice";
import Image from "next/image";
import { DashBoardSidBarMobileOptionComponent } from "../../components/dashboard/DashBoardSidBarMobileOptionComponent";
import { useLogoutMutation } from "../../redux/services/auth.service";
import appAlert from "../../helpers/appAlert";


interface DashboardLayoutProps {
  children: any;
  title: string
}

const DashboardLayout = ({ children, title }: DashboardLayoutProps) => {
  const router = useRouter()
  const { token } = useAppSelector((state) => state.auth)

  const dispatch = useAppDispatch();
  const checkForToken = () => {
    dispatch(getTokenFromLocalStorage())
    // getUser.isFetching
    // alert(token)
    if (!token) {
      router.replace('/signin')
    }
  }

  const walletsquery = useGetWalletsQuery()
      
  useEffect(() => {
    checkForToken()
    // dispatch(setWalletBalance({walletBalance: walletsquery?.data?.data}))
  
  }, [])

  useEffect(() => {
    dispatch(setWalletBalance({walletBalance: walletsquery?.data?.data}))
  }, [dispatch, walletsquery?.data?.data])
  
  const { isOpen, onOpen, onClose } = useDisclosure()
  

  const handleDrawer = () => {
    onOpen()
  }
 
  const [logout] = useLogoutMutation()

  const handleLogout = async () => {
    // dispatch(removeTokenFromLocalStorage());
    const resp:any = await logout()

    if(resp?.data?.status === 200) {
      appAlert.success(resp?.data?.message)
      dispatch(removeTokenFromLocalStorage())
      router.push('/signin')
    } else {
      appAlert.error("something went wrong")
      dispatch(removeTokenFromLocalStorage())
      router.push('/signin')
    } 
    
  }

  return (
    <Flex
      flexDirection={'column'}
      h={{ lg: "100vh", md: "100vh", sm: "100vh", base: "100vh" }}
      bg="mainBGColor"
      width={["100%", "100%", "unset", "unset"]}
    >
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={remoteImages.logosinglesvg} />
      </Head>
      <chakra.header id="header">
        <Flex w="100%" bg="#000" px={{ md: "8", base: '4' }} >
          <Img src={remoteImages.logosvg} alt="" w={'32'} py='4' cursor={'pointer'} onClick={() => router.push('/dashboard')} />
          <HStack
            display={["none", "none", "flex", "flex"]}
            marginLeft="28"
            gap="6"
          >
            <Heading as="h4" size="md" color={'appWhiteColor'} cursor={'pointer'}>
              Trade
            </Heading>
            <Heading as="h4" size="md" color={'appWhiteColor'} cursor={'pointer'} onClick={() => router.push('/wallet')}>
              Wallet
            </Heading>
            <Heading as="h4" size="md" color={'appWhiteColor'} cursor={'pointer'} onClick={() => router.push('/swap')}>
              Swap
            </Heading>
            {/* <Heading as="h4" size="md" color={router.pathname.includes('order') ? 'primaryColor.900' : 'appWhiteColor'} cursor={'pointer'} onClick={() => router.push('/quick-trade/order')}>
              All Orders
            </Heading> */}
          </HStack>
          <HStack marginLeft="auto">
            <Img
              src={remoteImages.userAvatarSvg}
              alt=""
              objectFit="contain"
              boxSize=""
              mr={{ md: 8, base: 0 }}
            />
            <Heading
              display={["none", "none", "none", "unset"]}
              as="h4"
              size="md"
              color={'appWhiteColor'}
            >
              English | NGN
            </Heading>

          </HStack>
        </Flex>
      </chakra.header>

      {/* contains the drawer for mobile view */}
      <Box display={["flex", "flex", "none", "none"]} bg="red">
        <Drawer
          isOpen={isOpen}
          placement='right'
          onClose={onClose}
        >
          <DrawerOverlay />
          <DrawerContent>
            <DrawerCloseButton />
            <DrawerHeader mt=" 50px" pl="55px">More</DrawerHeader>
            <DrawerBody>
              <DashBoardSidBarMobileOptionComponent label="Wallet" route="wallet" onClick={() => {
                router.push('/wallet')
                  onClose()
              }} display={["flex", "flex", "flex", "flex"]}>
                {router.pathname.includes('wallet') ? <Img
                    src={remoteImages.walletSelected}
                    alt=""
                    objectFit="contain"
                    boxSize=""
                  /> : <Img
                    src={remoteImages.walletDesktopUnselected}
                    alt=""
                    objectFit="contain"
                    boxSize=""
                  />}
              </DashBoardSidBarMobileOptionComponent>

              <DashBoardSidBarMobileOptionComponent label="FAQs" route="faq" display={["flex", "flex", "flex", "flex"]}>
                {router.pathname.includes('faq') ? <Img
                    src={remoteImages.faqsSelected}
                    alt=""
                    objectFit="contain"
                    boxSize=""
                  /> : <Img
                    src={remoteImages.faqsDesktopUnselected}
                    alt=""
                    objectFit="contain"
                    boxSize=""
                  />}
              </DashBoardSidBarMobileOptionComponent>

              <DashBoardSidBarMobileOptionComponent label="Settings" route="setting" display={["flex", "flex", "flex", "flex"]} onClick={() => {
                router.push('/settings')
                onClose()
              }}>
                {router.pathname.includes('setting') ? <Img
                  src={remoteImages.settingsSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.settingsDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </DashBoardSidBarMobileOptionComponent>

              
            <Divider bg={"black"} display={["flex", "flex", "flex", "flex"]} />
              <HStack
                pl={"45px"}
                mt="20px"
                width={"100%"}
                display={["flex", "flex", "flex", "flex"]}
                cursor={'pointer'}
                onClick={handleLogout}
                >
                  <Img
                    src={remoteImages.logoutSvg}
                    alt=""
                    objectFit="contain"
                    boxSize=""
                  />
                  <Text fontSize={"lg"}>Log Out</Text>
                </HStack>

            </DrawerBody>

          </DrawerContent>
        </Drawer>
      </Box>
      
      <Grid
        templateColumns={[
          "unset",
          "unset",
          "repeat(12, 1fr)",
          "repeat(12, 1fr)",
        ]}
        templateRows={["repeat(12, 1fr)", "repeat(12, 1fr)", "unset", "unset"]}
        h="full"
        display={["flex", "flex", "", ""]}
        flexDirection={["column-reverse", "column-reverse", "unset", "unset"]}
        overflowY={'scroll'}
      >
        <GridItem colSpan={[0, 0, 2, 2]} color={"black"} rowSpan={[2, 2, 0, 0]}>
          <VStack
            bg="#FFFFFF"
            justifyContent={["", "", "space-between", "space-between"]}
            flexDirection={["row", "row", "column", "column"]}
            h={"100%"}
            boxShadow={["0px -4px 11px rgba(0, 0, 0, 0.08)", "0px -4px 11px rgba(0, 0, 0, 0.08)", "unset", "unset"]}
            borderRadius={["12px 12px 0px 0px", "10px 10px 0 0", "unset", "unset"]}
          >
            <DashBoardSidBarOptionComponent label="Home" route="dashboard" onClick={() => router.push('/dashboard')} display={["flex", "flex", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('dashboard') ? <Img
                  src={remoteImages.homeSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.homeDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}

              </Show>
              <Show below="sm">
                {router.pathname.includes('dashboard') ? <Img
                  src={remoteImages.homeSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.homeMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>

            </DashBoardSidBarOptionComponent>

            <DashBoardSidBarOptionComponent label="Quick Trade" route="trade" onClick={() => router.push('/quick-trade')} display={["flex", "flex", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('trade') ? <Img
                  src={remoteImages.quickTradeSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.quickTradeDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}

              </Show>
              <Show below="sm">
                {router.pathname.includes('trade') ? <Img
                  src={remoteImages.quickTradeSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.quickTradeMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}

              </Show>

            </DashBoardSidBarOptionComponent>

            <DashBoardSidBarOptionComponent label="P2P" route="p2p" onClick={() => router.push('/p2p')} display={["flex", "flex", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('p2p') ? <Img
                  src={remoteImages.p2pSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.p2pDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>
              <Show below="sm">
                {router.pathname.includes('p2p') ? <Img
                  src={remoteImages.p2pSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.p2pMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>

            </DashBoardSidBarOptionComponent>

            <DashBoardSidBarOptionComponent label="Swap" route="swap" onClick={() => router.push('/swap')} display={["flex", "flex", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('swap') ? <Img
                  src={remoteImages.swapSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.swapDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>
              <Show below="sm">
                {router.pathname.includes('swap') ? <Img
                  src={remoteImages.swapSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.swapMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>

            </DashBoardSidBarOptionComponent>


            <DashBoardSidBarOptionComponent label="Wallet" route="wallet" onClick={() => router.push('/wallet')} display={["none", "none", "flex", "flex"]}>
            <Show above="md">
              {router.pathname.includes('wallet') ? <Img
                src={remoteImages.walletSelected}
                alt=""
                objectFit="contain"
                boxSize=""
              /> : <Img
                src={remoteImages.walletDesktopUnselected}
                alt=""
                objectFit="contain"
                boxSize=""
              />}
            </Show>
            <Show below="sm">
              {router.pathname.includes('wallet') ? <Img
                src={remoteImages.walletSelected}
                alt=""
                objectFit="contain"
                boxSize=""
              /> : <Img
                src={remoteImages.walletMobileUnselected}
                alt=""
                objectFit="contain"
                boxSize=""
              />}
            </Show>

            </DashBoardSidBarOptionComponent>

            <DashBoardSidBarOptionComponent label="FAQs" route="faq" display={["none", "none", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('faq') ? <Img
                  src={remoteImages.faqsSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.faqsDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>
              <Show below="sm">
                {router.pathname.includes('faq') ? <Img
                  src={remoteImages.faqsSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.faqsMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>

            </DashBoardSidBarOptionComponent>

            <DashBoardSidBarOptionComponent label="Settings" route="setting" onClick={() => router.push('/settings')} display={["none", "none", "flex", "flex"]}>
              <Show above="md">
                {router.pathname.includes('setting') ? <Img
                  src={remoteImages.settingsSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.settingsDesktopUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>
              <Show below="sm">
                {router.pathname.includes('setting') ? <Img
                  src={remoteImages.settingsSelected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                /> : <Img
                  src={remoteImages.settingsMobileUnselected}
                  alt=""
                  objectFit="contain"
                  boxSize=""
                />}
              </Show>

            </DashBoardSidBarOptionComponent>

            

            
            {/* this is the more button for the mobile section */}
            <HStack
              px={[0, 0, 8, 8]}
              py={[3, 3, 3, 3]}
              display={["flex", "flex", "none", "none"]}
              borderRadius={[0, 0, 'md', 'lg']}
              my={[0, 0, 2, 2]}
              width={"100%"}
              flexDirection={["column", "column", "row", "row"]}
              alignItems={["center"]}
              onClick={handleDrawer}
            >
              <Box p={{ lg: '2.5', base: '2' }}
                  borderRadius={'md'} >
                  <Image src={MobileMore} alt=""/>
              </Box>
              <Text
                  fontSize={["10px", "10px", "lg", "lg"]}
                  margin={["0"]}
                  textAlign={{ base: 'center', md: 'left' }}
              >
                  More
              </Text>
            </HStack>

            <Divider bg={"black"} display={["none", "none", "flex", "flex"]} />
            <HStack
              justifyContent={"center"}
              py={4}
              width={"100%"}
              marginTop={"auto"}
              display={["none", "none", "flex", "flex"]}
              cursor={'pointer'}
              onClick={handleLogout}
            >
              <Img
                src={remoteImages.logoutSvg}
                alt=""
                objectFit="contain"
                boxSize=""
              />
              <Text fontSize={"lg"}>Log Out</Text>
            </HStack>
          </VStack>
        </GridItem>
       
       
        <GridItem
          colSpan={[0, 0, 10, 10]}
          rowSpan={[10, 10, 0, 0]}
          color={"black"}
          flex={[1, 1, "", ""]}
          overflow={'scroll'}
          padding={{ lg: '8', base: '10px' }}
          sx={
            {
              '::-webkit-scrollbar': {
                display: 'none'
              }
            }
          }
        >
          {children}
        </GridItem>
      </Grid>
    </Flex>
  );
};


export default DashboardLayout;
